# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MathFuncsDll', [dirname(__file__)])
        except ImportError:
            import _MathFuncsDll
            return _MathFuncsDll
        if fp is not None:
            try:
                _mod = imp.load_module('_MathFuncsDll', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _MathFuncsDll = swig_import_helper()
    del swig_import_helper
else:
    import _MathFuncsDll
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class BigInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BigInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BigInt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _MathFuncsDll.new_BigInt(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __add__(self, rv):
        return _MathFuncsDll.BigInt___add__(self, rv)

    def __sub__(self, rv):
        return _MathFuncsDll.BigInt___sub__(self, rv)

    def __mul__(self, rv):
        return _MathFuncsDll.BigInt___mul__(self, rv)

    def __div__(self, rv):
        return _MathFuncsDll.BigInt___div__(self, rv)

    def __mod__(self, rv):
        return _MathFuncsDll.BigInt___mod__(self, rv)

    def __eq__(self, rv):
        return _MathFuncsDll.BigInt___eq__(self, rv)

    def __ne__(self, rv):
        return _MathFuncsDll.BigInt___ne__(self, rv)

    def __ge__(self, rv):
        return _MathFuncsDll.BigInt___ge__(self, rv)

    def __le__(self, rv):
        return _MathFuncsDll.BigInt___le__(self, rv)

    def __lt__(self, rv):
        return _MathFuncsDll.BigInt___lt__(self, rv)

    def __gt__(self, rv):
        return _MathFuncsDll.BigInt___gt__(self, rv)

    def Print(self):
        return _MathFuncsDll.BigInt_Print(self)

    def Read(self, fileName, b, bin):
        return _MathFuncsDll.BigInt_Read(self, fileName, b, bin)

    def Write(self, fileName, bin):
        return _MathFuncsDll.BigInt_Write(self, fileName, bin)

    def Convert(self, n):
        return _MathFuncsDll.BigInt_Convert(self, n)

    def Copy(self, a):
        return _MathFuncsDll.BigInt_Copy(self, a)

    def Power(self, a, b, m):
        return _MathFuncsDll.BigInt_Power(self, a, b, m)
    __swig_destroy__ = _MathFuncsDll.delete_BigInt
    __del__ = lambda self: None
BigInt_swigregister = _MathFuncsDll.BigInt_swigregister
BigInt_swigregister(BigInt)

# This file is compatible with both classic and new-style classes.


